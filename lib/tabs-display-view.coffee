{View, TextEditorView} = require 'atom-space-pen-views'

class TabsDisplayView extends View
  @content: ->
    @div class: 'displays', =>
      @div class: 'console', =>
        @div id: 'git-go-output'
        @subview 'gitGoInput', new TextEditorView(mini: true)
      @div class: 'files', =>
        @div =>
          @h2 'Staging'
          @h3 'add (. | -u | -A | <file>)'
          @span '.'
          @span class: 'description', 'Stages any files that have changed or have been added'
          @span '-u'
          @span class: 'description', 'Stages any files that have changed or have been removed'
          @span '-A'
          @span class: 'description', 'Equivalent to git add .; git add -u'
          @span '<file>'
          @span class: 'description', 'Stages <file>'
          @h3 'rm [--cached] <file>'
          @span '<file>'
          @span class: 'description', 'Removes <file> from the index and from the working directory and stages it for deletion'
          @span '--cached <file>'
          @span class: 'description', 'Removes <file> from the index only'
        @div =>
          @h2 'Unstaging'
          @span 'If the file is is already in the repo, use reset. Otherwise, use rm.'
          @h3 'reset HEAD <file>'
          @span class: 'description', 'Resets <file> to match the <file> at HEAD'
          @h3 'rm --cached <file>'
          @span class: 'description', 'Removes <file> from the index only'
        @div =>
          @h2 'Discarding Changes'
          @h3 'checkout <file>'
          @span class: 'description', 'Checks out <file> from HEAD'
          @h3 'reset [--soft | --mixed | --hard] <commit>'
          @span class: 'description', 'Resets the current branch head to <commit>. (Never reset on a public branch)'
          @span '--soft'
          @span class: 'description', 'Resets the head to <commit> but doesn\'t touch the index or working tree'
          @span '--mixed'
          @span class: 'description', 'Resets the index but not the working tree'
          @span '--hard'
          @span class: 'description', 'Resets the index and the working tree'
        @div =>
          @h2 'Committing'
          @h3 'commit [-a] [--amend] [-m <message>]'
          @span '-a'
          @span class: 'description', 'Equivalent to `git add -u; git commit ...`'
          @span '--amend'
          @span class: 'description', 'Combine the staged changes with the previous commit and replaces the previous commit with this one. (Never use amend on a central repository)'
          @span '-m <message>'
          @span class: 'description', 'Commit staged changes with the message <message>'
      @div class: 'branches', =>
        @div =>
          @h2 'Integrating Changes'
          @span 'Use either merge or rebase to integrate changes'
          @h3 'merge [--no-ff] <branch>'
          @span class: 'description', 'Merges <branch> into the current branch. If the branch can fast-forward, it will do that instead of generating a merge commit'
          @span '--no-ff'
          @span class: 'description', 'Generate a merge commit even if it could be fast forwarded'
          @h3 'rebase [-i] <commit>'
          @span class: 'description', 'Integrate upstream changes by moving the current branch\'s base to <commit>'
          @span '-i'
          @span class: 'description', 'Starts an interactive rebase session'
        @div =>
          @h2 'Remote Branches'
          @h3 'push [<remote> [<branch> [-u]]]'
          @span 'push'
          @span class: 'description', 'Pushes previously setup remote tracking branches for "origin"'
          @span 'push <remote>'
          @span class: 'description', 'Pushes previously setup remote tracking branches for <remote>'
          @span 'push <remote> <branch>'
          @span class: 'description', 'Pushes current branch to <remote>/<branch>'
          @span '-u'
          @span class: 'description', 'Set current branch to remotely track <remote>/<branch>'
          @h3 'fetch <remote> [<branch>]'
          @span class: 'description', 'Fetches all of the branches from the <remote> repo'
          @span 'fetch <remote> <branch>'
          @span class: 'description', 'Only fetches the specified branch'
          @h3 'pull [--rebase] <remote>'
          @span class: 'description', 'Fetch <remote>\'s copy of the current branch and immediately merge it into the local copy. Equivalent to `git fetch <remote>; git merge FETCH_HEAD`'
          @span '--rebase'
          @span class: 'description', 'Use `git rebase` instead of `git merge`'
          @h3 'Push a new branch to remote'
          @span 'push -u <remote> <branch>'
          @h3 'Delete a remote branch'
          @span 'push <remote> --delete <branch>'
      @div class: 'tags', =>
        @div =>
          @h2 'Tag Creation'
          @span 'New tags point to the current position of the repo'
          @h3 'tag <tag> [-m <message>]'
          @span '<tag>'
          @span class: 'description', 'Creates a lightweight tag for private use'
          @span '-m <message>'
          @span class: 'description', 'Creates an annotated tag for public use with the message of <message>'
        @div =>
          @h2 'Remote Tags'
          @h3 'push <remote> [<tag> | --tags]'
          @span '<tag>'
          @span class: 'description', 'Push <tag> to the remote repo'
          @span '--tags'
          @span class: 'description', 'Push all of your tags to the remote repo'
          @h3 'Delete a remote tag'
          @span 'push <remote> --delete refs/tags/<tag>'

module.exports = TabsDisplayView
